"""
Django settings for image_vectorizer_bot project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from configparser import Error as ConfigParserError
from configparser import RawConfigParser
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_ROOT = BASE_DIR

CONFIG_PATH_LIST = [
    os.path.join(BASE_DIR, 'django.conf')
]
CONFIG = RawConfigParser()
CONFIG.read(CONFIG_PATH_LIST)

YES = [True, 'True', 'true', 1, '1', 'да', 'Да', 'Yes', 'yes']


def config_value(key, default=None):
    """
    Если значения нет в конфиге, вернётся None
    Во всех других случаях строка

    :param key:
    :param default:
    :return:
    """
    parts = key.split('__', 1)
    section = (
        len(parts) == 1
        and 'common'
        or parts[0]
    )
    option = parts[-1]

    value = os.environ.get(key)
    if value is None:
        try:
            value = CONFIG.get(section, option)
        except ConfigParserError:
            value = None

    if value is None:
        value = default

    return value


def config_list(key, default=None, splitter=','):
    value = config_value(key)
    if value is None:
        value = default
    else:
        value = value.split(splitter)
        value = [x.strip() for x in value]
        value = [x for x in value if x]

    return value


SECRET_KEY = config_value('SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config_value('DEBUG', False) in YES

ALLOWED_HOSTS = config_list('ALLOWED_HOSTS', [])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'webhook',
    'rest_framework',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'image_vectorizer_bot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'image_vectorizer_bot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config_value('DB_POSTGRES_NAME'),
        'USER': config_value('DB_POSTGRES_USER'),
        'PASSWORD': config_value('DB_POSTGRES_PASSWORD'),
        'HOST': config_value('DB_POSTGRES_HOST'),
        'PORT': config_value('DB_POSTGRES_PORT'),
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # noqa
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

TELEGRAM_API_TOKEN = config_value('TELEGRAM_API_TOKEN', '')

CELERY_BROKER_URL = config_value('REDIS_URL', 'redis://redis:6379')
CELERY_RESULT_BACKEND = config_value('REDIS_URL', 'redis://redis:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_DEFAULT_QUEUE = 'default'

VECTORIZE_IMAGE_TIME_LIMIT = int(
    config_value('VECTORIZE_IMAGE_TIME_LIMIT', 3 * 60 * 60)
)
VECTORIZE_IMAGE_SOFT_TIME_LIMIT = int(
    config_value('VECTORIZE_IMAGE_SOFT_TIME_LIMIT', 2 * 60 * 60)
)
